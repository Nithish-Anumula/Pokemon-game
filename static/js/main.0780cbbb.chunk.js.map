{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","reportWebVitals.js","index.js"],"names":["Pokecard","number","imgSrc","this","props","id","slice","className","name","src","alt","type","exp","Component","Pokedex","Ans","isWinner","pokemon","map","p","base_experience","Pokegame","hand1","hand2","length","randIdx","Math","floor","random","randPokemon","splice","push","exp1","reduce","pokeman","exp2","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAsBeA,G,6KAfP,IAHUC,EAGNC,EAAM,UALD,8DAKC,QAHAD,EAG4BE,KAAKC,MAAMC,KAHlB,IAAM,YAAKJ,GAASK,OAAO,GAAKL,EAGrD,QACV,OAEI,sBAAKM,UAAW,WAAhB,UACI,oBAAIA,UAAW,iBAAf,SAAiCJ,KAAKC,MAAMI,OAC5C,qBAAKC,IAAOP,EAAQQ,IAAOP,KAAKC,MAAMI,OACtC,sBAAKD,UAAY,gBAAjB,mBAAwCJ,KAAKC,MAAMO,QACnD,sBAAKJ,UAAW,gBAAhB,kBAAsCJ,KAAKC,MAAMQ,c,GATzCC,cCuBTC,G,6KAtBP,IAAIC,EAMJ,OAJIA,EADDZ,KAAKC,MAAMY,SACJ,oBAAIT,UAAY,iBAAhB,0BAEA,oBAAIA,UAAY,iBAAhB,0BAGN,sBAAKA,UAAY,UAAjB,UACIQ,EACA,oDAAuBZ,KAAKC,MAAMQ,OAElC,qBAAKL,UAAW,gBAAhB,SACCJ,KAAKC,MAAMa,QAAQC,KAAI,SAACC,GAAD,OACpB,cAAC,EAAD,CAAUd,GAAKc,EAAEd,GAAIG,KAAQW,EAAEX,KAAMG,KAAOQ,EAAER,KAAMC,IAAOO,EAAEC,8B,GAhB3DP,cCChBQ,E,uKAkBE,IAFA,IAAIC,EAAQ,GACRC,EAAK,YAAOpB,KAAKC,MAAMa,SACrBK,EAAME,OAAOD,EAAMC,QAAO,CAC5B,IAAIC,EAAWC,KAAKC,MAAMD,KAAKE,SAASL,EAAMC,QAC1CK,EAAcN,EAAMO,OAAOL,EAAQ,GAAG,GAC1CH,EAAMS,KAAKF,GAGf,IAAIG,EAAOV,EAAMW,QAAO,SAACrB,EAAIsB,GAAL,OAAiBtB,EAAMsB,EAAQd,kBAAgB,GACnEe,EAAOZ,EAAMU,QAAO,SAACrB,EAAIsB,GAAL,OAAiBtB,EAAMsB,EAAQd,kBAAgB,GAEvE,OACI,gCACI,cAAC,EAAD,CAASH,QAAWK,EAAOV,IAAMoB,EAAMhB,SAAYgB,EAAMG,IACzD,cAAC,EAAD,CAASlB,QAAWM,EAAOX,IAAOuB,EAAMnB,SAAYmB,EAAOH,W,GA9BpDnB,aAAjBQ,EACKe,aAAe,CAClBnB,QAAU,CACP,CAACZ,GAAI,EAAGG,KAAM,aAAcG,KAAM,OAAQS,gBAAgB,IAC1D,CAACf,GAAI,EAAGG,KAAM,WAAYG,KAAM,QAASS,gBAAgB,IACzD,CAACf,GAAI,GAAIG,KAAM,UAAWG,KAAM,MAAOS,gBAAgB,IACvD,CAACf,GAAI,GAAIG,KAAM,aAAcG,KAAM,SAAUS,gBAAgB,IAC7D,CAACf,GAAI,GAAIG,KAAM,UAAWG,KAAM,WAAYS,gBAAgB,IAC5D,CAACf,GAAI,GAAIG,KAAM,cAAeG,KAAM,SAAUS,gBAAgB,IAC9D,CAACf,GAAI,GAAIG,KAAM,SAAUG,KAAM,SAAUS,gBAAgB,IACzD,CAACf,GAAI,IAAKG,KAAM,QAASG,KAAM,SAAUS,gBAAgB,OA2BrDC,QCzBAgB,E,uKAVX,OACE,qBAAK9B,UAAY,MAAjB,SACE,cAAC,EAAD,U,GAJYM,aCQLyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0780cbbb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Pokecard.css';\r\nconst POKE_API = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/';\r\n\r\nlet padToThree = (number) => (number<= 999 ? `00${number}`.slice(-3) : number );\r\n class Pokecard extends Component {\r\n    render() {\r\n        let imgSrc = `${POKE_API}${padToThree(this.props.id)}.png`;\r\n        return (    \r\n\r\n            <div className= \"Pokecard\">\r\n                <h1 className= \"Pokecard-title\">{this.props.name}</h1>\r\n                <img src = {imgSrc} alt = {this.props.name}/>\r\n                <div className = \"Pokecard-data\">Type: {this.props.type}</div>\r\n                <div className= \"Pokecard-data\">Exp: {this.props.exp}</div>\r\n\r\n            </div>\r\n        );  \r\n    \r\n    }\r\n}\r\n\r\nexport default Pokecard;\r\n","import React, { Component } from 'react'\r\nimport Pokecard from './Pokecard'\r\nimport './Pokedex.css';\r\nclass Pokedex extends Component{\r\n    \r\n    render() {\r\n        let Ans;\r\n        if(this.props.isWinner){\r\n            Ans = <h1 className = \"Pokedex-Winner\">Winning hand</h1>\r\n        }else{\r\n            Ans = <h1 className = \"Pokedex-Looser\">Loosing hand</h1>\r\n        }\r\n        return (\r\n            <div className = \"Pokedex\">\r\n               {Ans}\r\n                <h4>Total Experience: {this.props.exp}</h4>\r\n                \r\n                <div className= \"Pokedex-cards\">\r\n                {this.props.pokemon.map((p) =>(\r\n                    <Pokecard id= {p.id} name = {p.name} type= {p.type} exp = {p.base_experience}/>\r\n                ))}\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pokedex;","import React, { Component } from 'react';\r\nimport Pokedex from './Pokedex';\r\n\r\n\r\nclass Pokegame extends Component{\r\n    static defaultProps = {\r\n        pokemon : [\r\n           {id: 4, name: 'Charmander', type: 'fire', base_experience:62},\r\n           {id: 7, name: 'Squirtle', type: 'water', base_experience:63},\r\n           {id: 11, name: 'Metapod', type: 'Bug', base_experience:65},\r\n           {id: 12, name: 'Butterfree', type: 'flying', base_experience:75},\r\n           {id: 25, name: 'Pikachu', type: 'Electric', base_experience:76},\r\n           {id: 39, name: 'Jigglypuff ', type: 'normal', base_experience:85},\r\n           {id: 94, name: 'Gengar', type: 'poison', base_experience:90},\r\n           {id: 133, name: 'Eevee', type: 'normal', base_experience:100}\r\n   \r\n           \r\n       ]\r\n     };\r\n    render(){\r\n        let hand1 = [];\r\n        let hand2 = [...this.props.pokemon];\r\n        while(hand1.length<hand2.length){\r\n            let randIdx  = Math.floor(Math.random()*hand2.length);\r\n            let randPokemon = hand2.splice(randIdx,1)[0];\r\n            hand1.push(randPokemon);\r\n\r\n        }\r\n        let exp1 = hand1.reduce((exp,pokeman) => exp + pokeman.base_experience,0);\r\n        let exp2 = hand2.reduce((exp,pokeman) => exp + pokeman.base_experience,0);\r\n\r\n        return(\r\n            <div>\r\n                <Pokedex pokemon = {hand1} exp ={exp1} isWinner = {exp1> exp2}/>\r\n                <Pokedex pokemon = {hand2} exp = {exp2} isWinner = {exp2 > exp1}/>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Pokegame;","import React, { Component } from 'react';\n\nimport Pokegame from './Pokegame';\n\n  class App extends Component {\n  render() {\n    return ( \n      <div className = \"App\">\n        <Pokegame/>\n     \n        \n      </div>\n    );\n  }\n}   \n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}